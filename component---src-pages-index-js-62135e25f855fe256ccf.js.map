{"version":3,"sources":["webpack:///./src/components/Image.js","webpack:///./src/components/boxes/PokeBoxCell.js","webpack:///./src/components/boxes/PokeBoxCellGap.js","webpack:///./src/components/boxes/PokeBoxRow.js","webpack:///./src/components/boxes/PokeBoxRowGap.js","webpack:///./src/components/boxes/PokeBox.js","webpack:///./src/components/boxes/PokeBoxList.js","webpack:///./src/pages/index.js"],"names":["disableClick","event","preventDefault","Image","src","alt","title","className","replace","toLowerCase","split","map","s","charAt","toUpperCase","substring","join","aria-label","data-tooltip","href","onClick","PokeBoxCell","boxCell","pid","name","classTags","tags","length","classNameStr","includes","image","gmaxTitle","PokeBoxCellGap","PokeBoxRow","cells","boxRow","cell","i","key","push","PokeBoxRowGap","n","PokeBox","boxTitle","rowContents","boxRows","row","PokeBoxList","result","boxBuffer","boxColumns","forEach","box","rows","IndexPage","Layout","SEO","style","borderRadius","background","rel","target"],"mappings":"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","file":"component---src-pages-index-js-62135e25f855fe256ccf.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nfunction disableClick(event) {\n  event.preventDefault();\n  return false;\n}\n\nconst Image = ({ src, alt = \"\", title = \"\", className = \"\"}) => {\n  title = title.replace(/-/g, \" \")\n  title = title.toLowerCase()\n    .split(\" \")\n    .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n    .join(\" \")\n  return <>\n    <a aria-label={title} data-tooltip={title} className={\"pk-link \" + className} href=\"#\" onClick={disableClick}>\n      <img className={\"pk-img\"} alt={alt} src={src}/>\n      {/*<i className=\"pk-tooltip\">{title}</i>*/}\n    </a>\n  </>\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n}\n\nexport default Image\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Image from \"../Image\"\n\nconst PokeBoxCell = ({ boxCell }) => {\n  let title = `${boxCell.pid} - ${boxCell.name}`\n  let classTags = \"\"\n\n  if (boxCell.tags && boxCell.tags.length > 0) {\n    classTags = \" pk-tag-\" + boxCell.tags.join(\" pk-tag-\")\n  }\n\n  let classNameStr = `pk-box-poke${classTags} column`\n\n  if (!boxCell.tags.includes(\"has-gigantamax\")) {\n    return (\n      <>\n        <div className={classNameStr}>\n          <Image title={title} alt={title} src={boxCell.image}/>\n        </div>\n      </>\n    )\n  }\n  let gmaxTitle = title.split(\"-\")[0] + \"-\" + title.split(\"-\")[1] + \"-gigantamax\"\n\n  return (\n    <>\n      <div className={classNameStr}>\n        <Image className=\"pk-img-default\" title={title} alt={title} src={boxCell.image}/>\n        <Image className=\"pk-img-hover\" title={gmaxTitle} alt={gmaxTitle}\n               src={boxCell.image.replace(\".png\", \"-gigantamax.png\")}/>\n      </div>\n    </>\n  )\n}\n\nPokeBoxCell.propTypes = {\n  boxCell: PropTypes.object.isRequired,\n}\n\nexport default PokeBoxCell\n","import React from \"react\"\nimport Image from \"../Image\"\n\nconst PokeBoxCellGap = () => {\n  return (\n    <>\n      <div className=\"pk-box-poke pk-box-poke-gap column\">\n        <Image alt=\"-\" src=\"media/renders/000-gap.png\"/>\n      </div>\n    </>\n  )\n}\n\nexport default PokeBoxCellGap\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport PokeBoxCell from \"./PokeBoxCell\"\nimport PokeBoxCellGap from \"./PokeBoxCellGap\"\n\nconst boxRowCellCount = 6\n\nconst PokeBoxRow = ({ boxRow }) => {\n  let cells = boxRow.map((cell, i) => {\n    return <PokeBoxCell key={i} boxCell={cell}/>\n  })\n  // fill gaps\n  if (cells.length < boxRowCellCount) {\n    for (let i = cells.length; i < boxRowCellCount; i++) {\n      cells.push(\n        <PokeBoxCellGap key={i}/>,\n      )\n    }\n  }\n  return (\n    <>\n      <div className=\"pk-box-row columns is-mobile\">\n        {cells}\n      </div>\n    </>\n  )\n}\n\nPokeBoxRow.propTypes = {\n  boxRow: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default PokeBoxRow\n","import React from \"react\"\nimport PokeBoxCellGap from \"./PokeBoxCellGap\"\n\nconst PokeBoxRowGap = () => {\n  let cells = [0, 1, 2, 3, 4, 5].map((n , i) => {\n    return <PokeBoxCellGap key={i} />\n  })\n  return (\n    <>\n      <div className=\"pk-box-row columns is-mobile\">\n        {cells}\n      </div>\n    </>\n  )\n}\n\nexport default PokeBoxRowGap\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport PokeBoxRow from \"./PokeBoxRow\"\nimport PokeBoxRowGap from \"./PokeBoxRowGap\"\n\nconst boxRowCount = 5\n\nconst PokeBox = ({ boxTitle, boxRows }) => {\n  let rowContents = boxRows.map((row, i) => {\n    return <PokeBoxRow key={i} boxRow={row[\"cells\"]}/>\n  })\n\n  // fill gaps\n  if (rowContents.length < boxRowCount) {\n    for (let i = rowContents.length; i < boxRowCount; i++) {\n      rowContents.push(\n        <PokeBoxRowGap key={i}/>,\n      )\n    }\n  }\n\n  return (\n    <>\n      <div className=\"pk-box-container hero\">\n        <div className=\"hero-head\">\n          <p className=\"title\">{boxTitle}</p>\n        </div>\n        <div className=\"hero-body\">\n          {rowContents}\n        </div>\n      </div>\n    </>\n  )\n}\n\nPokeBox.propTypes = {\n  boxTitle: PropTypes.string.isRequired,\n  boxRows: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default PokeBox\n","import React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport PokeBox from \"./PokeBox\"\n\nconst boxColumnCount = 3\n\nconst PokeBoxList = () => {\n  const result = useStaticQuery(graphql`{\n      dataJson {\n          boxes {\n              id\n              rows {\n                  id\n                  cells: pokemon {\n                      id\n                      pid\n                      name\n                      name_numeric_avatar\n                      image\n                      image_shiny\n                      tags\n                  }\n              }\n          }\n      }\n  }`)\n\n  let boxBuffer = []\n  let boxColumns = []\n\n  result[\"dataJson\"][\"boxes\"].forEach((box, i) => {\n    let title = `BOX ${i + 1}`\n    boxBuffer.push(\n      <div key={i} className=\"column is-one-third-widescreen is-half is-full-mobile\"><PokeBox boxTitle={title} boxRows={box.rows}/></div>,\n    )\n    if (boxBuffer.length === boxColumnCount) {\n      boxColumns.push(\n        <div key={i} className=\"columns is-full-mobile\">{boxBuffer}</div>,\n      )\n      boxBuffer = []\n    }\n  })\n\n  if (boxBuffer.length > 0) {\n    boxColumns.push(\n      <div key={-1} className=\"columns is-full-mobile\">{boxBuffer}</div>,\n    )\n  }\n\n  if (boxBuffer.length < boxColumnCount) {\n    for (let i = boxColumnCount.length; i < boxColumnCount; i++) {\n      boxColumns.push(\n        <div key={-(i + 2)} className=\"columns is-full-mobile\">&nbsp;</div>,\n      )\n    }\n  }\n\n  //boxColumns.push(<div style={{ clear: \"both\" }}/>)\n\n  return boxColumns\n}\n\nexport default PokeBoxList\n","import React from \"react\"\n\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/SEO\"\nimport PokeBoxList from \"../components/boxes/PokeBoxList\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Box Organizer\"/>\n    <div className=\"container\">\n      <div className=\"hero is-light\" style={{\n        borderRadius: \"20px\",\n        background: \"linear-gradient(180deg, rgba(245,245,245,0.6) 0%, #f5f5f5 100%)\",\n      }}>\n        <div className=\"hero-body\">\n          <div className=\"content  has-text-centered is-medium\">\n            Living Dex is a visual guide for organizing Pokémon HOME boxes.\n            <br/>\n            This page contains a view of all storable Pokémon forms,\n            including all gender differences.\n            <br/>\n            The project is still in a very early state, but\n            please feel free to send any feedback directly&nbsp;\n            <a href=\"https://github.com/itsjavi/livingdex\" rel=\"noopener noreferrer\" target=\"_blank\">\n              via Github.\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n    <PokeBoxList/>\n  </Layout>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}